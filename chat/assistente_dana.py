# import streamlit as st
# import re
# from langchain.prompts import ChatPromptTemplate
# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
# from reportlab.lib.styles import getSampleStyleSheet
# from reportlab.lib.pagesizes import A4
# from reportlab.lib.units import cm
#
# def salvar_como_pdf(texto, caminho):
#     doc = SimpleDocTemplate(caminho, pagesize=A4,
#                             rightMargin=2*cm, leftMargin=2*cm,
#                             topMargin=2*cm, bottomMargin=2*cm)
#     styles = getSampleStyleSheet()
#     estilo = styles["Normal"]
#     estilo.fontName = "Helvetica"
#     estilo.fontSize = 12
#     estilo.leading = 16
#     estilo.alignment = 4  # Justificado
#
#     partes = texto.split("\n\n")
#     elementos = [Paragraph(par.strip(), estilo) for par in partes if par.strip()]
#     for i in range(len(elementos)-1):
#         elementos.insert(i*2 + 1, Spacer(1, 12))
#
#     doc.build(elementos)
#
# def salvar_como_txt(texto, caminho):
#     with open(caminho, "w", encoding="utf-8") as f:
#         f.write(texto)
#
# def gerar_resumo(chat, texto_base):
#     prompt = ChatPromptTemplate.from_template(
#         "Resuma o conte√∫do abaixo em t√≥picos objetivos, em portugu√™s do Brasil:\n\n{texto}\nEste resumo deve ser um pouco mais descritivo de modo a dar um entendimento mais claro sobre o assunto."
#     )
#     mensagem = prompt.format_messages(texto=texto_base[:3000])
#     resposta = chat.invoke(mensagem)
#     return resposta.content.strip()
#
# # def iniciar_assistente(chat, texto_base):
# #     template = ChatPromptTemplate.from_messages([
# #         ('system', 'O seu nome √© Dana, um assistente pessoal sempre dispon√≠vel. Fale com empatia, entusiasmo e com uma linguagem comum a todos.'
# #                    'Voce possui caracter√≠sticas t√©cnicas quando necess√°rio usando todo o seu conhecimento '
# #                    'Use as informa√ß√µes abaixo:\n\n{informacoes}'),
# #         ('user', '{input}')
# #     ])
# #     chain = template | chat
# #
# #     if 'chat' not in st.session_state:
# #         st.session_state.chat = []
# #         if 'nome_usuario' not in st.session_state:
# #             nome = st.text_input("Ol√°, qual √© o seu nome?", placeholder="Ex: Roberto")
# #             if nome:
# #                 st.session_state.nome_usuario = nome
# #                 st.rerun()
# #         else:
# #             nome = st.session_state.nome_usuario
# #             for entrada in st.session_state.chat:
# #                 with st.chat_message("user"):
# #                     st.markdown(entrada["pergunta"])
# #                 with st.chat_message("assistant"):
# #                     st.markdown(entrada["resposta"])
# #
# #             pergunta = st.chat_input(f"Como posso te ajudar, {nome}:")
# #             if pergunta:
# #                 with st.chat_message("user"):
# #                     st.markdown(pergunta)
# #                 with st.spinner("Estou analisando a melhor resposta..."):
# #                     resposta = chain.invoke({
# #                         'informacoes': texto_base,
# #                         'input': pergunta,
# #                         'nome_usuario': nome
# #                     }).content
# #                 with st.chat_message("assistant"):
# #                     st.markdown(resposta)
# #                 st.session_state.chat.append({
# #                     "pergunta": pergunta,
# #                     "resposta": resposta
# #                 })
#
#
# def iniciar_assistente(chat, texto_base):
#     template = ChatPromptTemplate.from_messages([
#         ('system', 'O seu nome √© Dana, um assistente pessoal sempre dispon√≠vel. Fale com empatia, entusiasmo e com uma linguagem comum a todos.'
#                    'Voc√™ possui caracter√≠sticas t√©cnicas quando necess√°rio, usando todo o seu conhecimento. '
#                    'Use as informa√ß√µes abaixo:\n\n{informacoes}'),
#         ('user', '{input}')
#     ])
#     chain = template | chat
#
#     # Inicializa hist√≥rico de chat se ainda n√£o existir
#     if 'chat' not in st.session_state:
#         st.session_state.chat = []
#
#     # Captura nome do usu√°rio
#     if 'nome_usuario' not in st.session_state:
#         nome = st.text_input("Ol√°, qual √© o seu nome?", placeholder="Ex: Roberto")
#         if nome:
#             st.session_state.nome_usuario = nome
#             st.rerun()
#         return  # Aguarda nome ser inserido
#
#     # Exibe hist√≥rico de mensagens
#     nome = st.session_state.nome_usuario
#     for entrada in st.session_state.chat:
#         with st.chat_message("user"):
#             st.markdown(entrada["pergunta"])
#         with st.chat_message("assistant"):
#             st.markdown(entrada["resposta"])
#
#     # Input do usu√°rio
#     pergunta = st.chat_input(f"Como posso te ajudar, {nome}:")
#     if pergunta:
#         with st.chat_message("user"):
#             st.markdown(pergunta)
#         with st.spinner("Estou analisando a melhor resposta..."):
#             resposta = chain.invoke({
#                 'informacoes': texto_base,
#                 'input': pergunta,
#                 'nome_usuario': nome
#             }).content
#         with st.chat_message("assistant"):
#             st.markdown(resposta)
#
#         # Atualiza hist√≥rico
#         st.session_state.chat.append({
#             "pergunta": pergunta,
#             "resposta": resposta
#         })
#



# assistente_dana.py
import streamlit as st
import re
import json
from langchain.prompts import ChatPromptTemplate
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm

def salvar_como_pdf(texto, caminho):
    doc = SimpleDocTemplate(caminho, pagesize=A4,
                            rightMargin=2*cm, leftMargin=2*cm,
                            topMargin=2*cm, bottomMargin=2*cm)
    styles = getSampleStyleSheet()
    estilo = styles["Normal"]
    estilo.fontName = "Helvetica"
    estilo.fontSize = 12
    estilo.leading = 16
    estilo.alignment = 4  # Justificado

    partes = texto.split("\n\n")
    elementos = [Paragraph(par.strip(), estilo) for par in partes if par.strip()]
    for i in range(len(elementos)-1):
        elementos.insert(i*2 + 1, Spacer(1, 12))

    doc.build(elementos)

def salvar_como_txt(texto, caminho):
    with open(caminho, "w", encoding="utf-8") as f:
        f.write(texto)

def gerar_resumo(chat, texto_base):
    prompt = ChatPromptTemplate.from_template(
        "Resuma o conte√∫do abaixo em t√≥picos objetivos, em portugu√™s do Brasil:\n\n{texto}\nEste resumo deve ser um pouco mais descritivo de modo a dar um entendimento mais claro sobre o assunto."
    )
    mensagem = prompt.format_messages(texto=texto_base[:3000])
    resposta = chat.invoke(mensagem)
    return resposta.content.strip()

def iniciar_assistente(chat, texto_base):
    template = ChatPromptTemplate.from_messages([
        ('system', '''Voc√™ √© DANA, um assistente amig√°vel e confi√°vel da DNA Ag√™ncia. Seu nome representa os pilares da organiza√ß√£o: Desenvolvimento, Necessidades Humanas e Aprendizagem Adaptativa.

Voc√™ sempre se dirige ao usu√°rio pelo nome {nome_usuario}, e responde com empatia, clareza e profissionalismo.

Use as informa√ß√µes abaixo para fornecer respostas √∫teis, acolhedoras e alinhadas com os valores da DNA Ag√™ncia:

{informacoes}

Durante a conversa, voc√™ deve:
- Compreender o contexto e o tom da mensagem do usu√°rio
- Fornecer respostas claras, relevantes e concisas
- Utilizar uma linguagem cordial, respeitosa e acolhedora
- Apresentar explica√ß√µes adicionais ou exemplos pr√°ticos sempre que necess√°rio
- Redirecionar para fontes confi√°veis ou conte√∫dos da DNA Ag√™ncia quando apropriado
- Manter o contexto da conversa durante toda a sess√£o
- Ser proativa ao esclarecer d√∫vidas ou limita√ß√µes de informa√ß√£o, com transpar√™ncia e empatia

Voc√™ representa a excel√™ncia da DNA Ag√™ncia. Responda sempre com foco em agregar valor, oferecer solu√ß√µes e proporcionar uma experi√™ncia humana e positiva ao usu√°rio.'''),
        ('user', '{input}')
    ])
    chain = template | chat

    if 'chat' not in st.session_state:
        st.session_state.chat = []

    if 'nome_usuario' not in st.session_state:
        nome = st.text_input("Ol√°, qual √© o seu nome?", placeholder="Ex: Roberto")
        if nome:
            st.session_state.nome_usuario = nome
            st.rerun()
        return

    nome = st.session_state.nome_usuario
    for entrada in st.session_state.chat:
        with st.chat_message("user"):
            st.markdown(entrada["pergunta"])
        with st.chat_message("assistant"):
            st.markdown(entrada["resposta"])

    pergunta = st.chat_input(f"Como posso te ajudar, {nome}:")
    if pergunta:
        with st.chat_message("user"):
            st.markdown(pergunta)
        with st.spinner("Estou analisando a melhor resposta..."):
            resposta = chain.invoke({
                'informacoes': texto_base,
                'input': pergunta,
                'nome_usuario': nome
            }).content
        with st.chat_message("assistant"):
            st.markdown(resposta)

        st.session_state.chat.append({
            "pergunta": pergunta,
            "resposta": resposta
        })

        # Bot√µes de feedback
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üëç Foi √∫til", key=f"feedback_util_{len(st.session_state.chat)}"):
                st.success("Obrigado pelo feedback!")
        with col2:
            if st.button("üëé N√£o foi √∫til", key=f"feedback_nao_util_{len(st.session_state.chat)}"):
                st.info("Obrigado! Vamos melhorar nas pr√≥ximas respostas.")

        # Salva hist√≥rico em JSON local
        with open("historico_conversa.json", "w", encoding="utf-8") as f:
            json.dump(st.session_state.chat, f, ensure_ascii=False, indent=2)